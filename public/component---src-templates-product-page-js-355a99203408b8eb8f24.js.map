{"version":3,"sources":["webpack:///./src/templates/product-page.js"],"names":["ProductPage","data","useState","imgsrc","setImgsrc","colourName","getColour","imageRef","useRef","useEffect","current","element","src","MutationObserver","muts","forEach","m","type","attributeName","target","observe","attributes","length","className","ref","cloudName","publicId","markdownRemark","frontmatter","image","width","crop","fetchFormat","quality","secure","to","name","price","data-item-id","id","data-item-price","data-item-url","fields","slug","data-item-name","data-item-image","dangerouslySetInnerHTML","__html","html","pageQuery"],"mappings":"iPAIe,SAASA,EAAT,GAAgC,IAATC,EAAQ,EAARA,KAAQ,EAClBC,mBAAS,IAA9BC,EADuC,KAC/BC,EAD+B,OAEdF,mBAAS,IAAlCG,EAFuC,KAE3BC,EAF2B,KAGtCC,EAAWC,iBAAO,MAoBxB,OAlBAC,qBAAU,YACRL,GAAU,kBAAMG,EAASG,QAAQC,QAAQC,OACrCL,EAASG,SAAWH,EAASG,QAAQC,UACtB,IAAIE,kBAAiB,SAAAC,GACpCA,EAAKC,SAAQ,SAAAC,GACI,eAAXA,EAAEC,MAA6C,QAApBD,EAAEE,eAC/Bd,GAAU,kBAAMY,EAAEG,OAAOP,aAItBQ,QAAQb,EAASG,QAAQC,QAAS,CACzCU,YAAY,MAGf,CAAClB,IACsB,IAAtBE,EAAWiB,QACbhB,GAAU,kBAAOD,EAAa,cAG9B,yBAAKkB,UAAU,yCACb,kBAAC,QAAD,CACEC,IAAKjB,EACLkB,UAAU,cACVC,SAAUzB,EAAK0B,eAAeC,YAAYC,MAC1CC,MAAM,MACNC,KAAK,QACLC,YAAY,OACZC,QAAQ,OACRC,OAAO,OACPX,UAAU,qCAEZ,yBAAKA,UAAU,iCACb,kBAAC,IAAD,CAAMA,UAAU,yBAAyBY,GAAG,aAA5C,sBAGA,wBAAIZ,UAAU,qCACXtB,EAAK0B,eAAeC,YAAYQ,MAEnC,0BAAMb,UAAU,4CAAhB,IACUtB,EAAK0B,eAAeC,YAAYS,OAE1C,4BACEd,UAAU,uCACVe,eAAcrC,EAAK0B,eAAeC,YAAYW,GAC9CC,kBAAiBvC,EAAK0B,eAAeC,YAAYS,MACjDI,gBAAexC,EAAK0B,eAAee,OAAOC,KAC1CC,iBAAgB3C,EAAK0B,eAAeC,YAAYQ,KAChDS,kBAAiB1C,GANnB,eAUA,yBACEoB,UAAU,gBACVuB,wBAAyB,CACvBC,OAAQ9C,EAAK0B,eAAeqB,UAQjC,IAAMC,EAAS","file":"component---src-templates-product-page-js-355a99203408b8eb8f24.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\"\r\nimport { graphql, Link } from \"gatsby\"\r\nimport { Image } from \"cloudinary-react\"\r\n\r\nexport default function ProductPage({ data }) {\r\n  let [imgsrc, setImgsrc] = useState(\"\")\r\n  let [colourName, getColour] = useState(\"\")\r\n  const imageRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    setImgsrc(() => imageRef.current.element.src)\r\n    if (imageRef.current && imageRef.current.element) {\r\n      const observer = new MutationObserver(muts => {\r\n        muts.forEach(m => {\r\n          if (m.type === \"attributes\" && m.attributeName === \"src\") {\r\n            setImgsrc(() => m.target.src)\r\n          }\r\n        })\r\n      })\r\n      observer.observe(imageRef.current.element, {\r\n        attributes: true,\r\n      })\r\n    }\r\n  }, [imgsrc])\r\n  if (colourName.length === 0) {\r\n    getColour(() => (colourName = \"original\"))\r\n  }\r\n  return (\r\n    <div className=\"flex bg-lavender flex-col md:flex-row\">\r\n      <Image\r\n        ref={imageRef}\r\n        cloudName=\"samson-ludo\"\r\n        publicId={data.markdownRemark.frontmatter.image}\r\n        width=\"600\"\r\n        crop=\"scale\"\r\n        fetchFormat=\"auto\"\r\n        quality=\"auto\"\r\n        secure=\"true\"\r\n        className=\"h-full w-full md:mx-8 rounded-lg\"\r\n      ></Image>\r\n      <div className=\"mt-4 md:mt-0 md:w-2/3 md:mx-8\">\r\n        <Link className=\"font-bold text-red-600\" to=\"/products\">\r\n          &#x2190; Back to Products\r\n        </Link>\r\n        <h1 className=\"font-bold text-4xl text-black-900\">\r\n          {data.markdownRemark.frontmatter.name}\r\n        </h1>\r\n        <span className=\"block font-semibold text-lg text-red-600\">\r\n          &#8358;{data.markdownRemark.frontmatter.price}\r\n        </span>\r\n        <button\r\n          className=\"btn btn-green mt-4 snipcart-add-item\"\r\n          data-item-id={data.markdownRemark.frontmatter.id}\r\n          data-item-price={data.markdownRemark.frontmatter.price}\r\n          data-item-url={data.markdownRemark.fields.slug}\r\n          data-item-name={data.markdownRemark.frontmatter.name}\r\n          data-item-image={imgsrc}\r\n        >\r\n          Add to Cart\r\n        </button>\r\n        <div\r\n          className=\"markdown mt-4\"\r\n          dangerouslySetInnerHTML={{\r\n            __html: data.markdownRemark.html,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query($id: String!) {\r\n    markdownRemark(id: { eq: $id }) {\r\n      html\r\n      frontmatter {\r\n        id\r\n        name\r\n        price\r\n        image\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}